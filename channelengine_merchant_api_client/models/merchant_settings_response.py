# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    The version of the OpenAPI document: 2.9.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from channelengine_merchant_api_client.configuration import Configuration


class MerchantSettingsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'company_name': 'str',
        'currency_code': 'str',
        'default_culture_code': 'str',
        'settings': 'SettingsResponse',
        'vat': 'list[VatSettingsResponse]'
    }

    attribute_map = {
        'name': 'Name',
        'company_name': 'CompanyName',
        'currency_code': 'CurrencyCode',
        'default_culture_code': 'DefaultCultureCode',
        'settings': 'Settings',
        'vat': 'Vat'
    }

    def __init__(self, name=None, company_name=None, currency_code=None, default_culture_code=None, settings=None, vat=None, local_vars_configuration=None):  # noqa: E501
        """MerchantSettingsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._company_name = None
        self._currency_code = None
        self._default_culture_code = None
        self._settings = None
        self._vat = None
        self.discriminator = None

        self.name = name
        self.company_name = company_name
        self.currency_code = currency_code
        self.default_culture_code = default_culture_code
        self.settings = settings
        self.vat = vat

    @property
    def name(self):
        """Gets the name of this MerchantSettingsResponse.  # noqa: E501


        :return: The name of this MerchantSettingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MerchantSettingsResponse.


        :param name: The name of this MerchantSettingsResponse.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def company_name(self):
        """Gets the company_name of this MerchantSettingsResponse.  # noqa: E501


        :return: The company_name of this MerchantSettingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this MerchantSettingsResponse.


        :param company_name: The company_name of this MerchantSettingsResponse.  # noqa: E501
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def currency_code(self):
        """Gets the currency_code of this MerchantSettingsResponse.  # noqa: E501


        :return: The currency_code of this MerchantSettingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this MerchantSettingsResponse.


        :param currency_code: The currency_code of this MerchantSettingsResponse.  # noqa: E501
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def default_culture_code(self):
        """Gets the default_culture_code of this MerchantSettingsResponse.  # noqa: E501


        :return: The default_culture_code of this MerchantSettingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._default_culture_code

    @default_culture_code.setter
    def default_culture_code(self, default_culture_code):
        """Sets the default_culture_code of this MerchantSettingsResponse.


        :param default_culture_code: The default_culture_code of this MerchantSettingsResponse.  # noqa: E501
        :type default_culture_code: str
        """

        self._default_culture_code = default_culture_code

    @property
    def settings(self):
        """Gets the settings of this MerchantSettingsResponse.  # noqa: E501


        :return: The settings of this MerchantSettingsResponse.  # noqa: E501
        :rtype: SettingsResponse
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this MerchantSettingsResponse.


        :param settings: The settings of this MerchantSettingsResponse.  # noqa: E501
        :type settings: SettingsResponse
        """

        self._settings = settings

    @property
    def vat(self):
        """Gets the vat of this MerchantSettingsResponse.  # noqa: E501


        :return: The vat of this MerchantSettingsResponse.  # noqa: E501
        :rtype: list[VatSettingsResponse]
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this MerchantSettingsResponse.


        :param vat: The vat of this MerchantSettingsResponse.  # noqa: E501
        :type vat: list[VatSettingsResponse]
        """

        self._vat = vat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantSettingsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MerchantSettingsResponse):
            return True

        return self.to_dict() != other.to_dict()
