# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    The version of the OpenAPI document: 2.9.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from channelengine_merchant_api_client.configuration import Configuration


class ShipmentSettingsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_tracked_shipment_method': 'str',
        'default_untracked_shipment_method': 'str',
        'automatically_set_shipment_method_after_minutes': 'int'
    }

    attribute_map = {
        'default_tracked_shipment_method': 'DefaultTrackedShipmentMethod',
        'default_untracked_shipment_method': 'DefaultUntrackedShipmentMethod',
        'automatically_set_shipment_method_after_minutes': 'AutomaticallySetShipmentMethodAfterMinutes'
    }

    def __init__(self, default_tracked_shipment_method=None, default_untracked_shipment_method=None, automatically_set_shipment_method_after_minutes=None, local_vars_configuration=None):  # noqa: E501
        """ShipmentSettingsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._default_tracked_shipment_method = None
        self._default_untracked_shipment_method = None
        self._automatically_set_shipment_method_after_minutes = None
        self.discriminator = None

        self.default_tracked_shipment_method = default_tracked_shipment_method
        self.default_untracked_shipment_method = default_untracked_shipment_method
        self.automatically_set_shipment_method_after_minutes = automatically_set_shipment_method_after_minutes

    @property
    def default_tracked_shipment_method(self):
        """Gets the default_tracked_shipment_method of this ShipmentSettingsResponse.  # noqa: E501


        :return: The default_tracked_shipment_method of this ShipmentSettingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._default_tracked_shipment_method

    @default_tracked_shipment_method.setter
    def default_tracked_shipment_method(self, default_tracked_shipment_method):
        """Sets the default_tracked_shipment_method of this ShipmentSettingsResponse.


        :param default_tracked_shipment_method: The default_tracked_shipment_method of this ShipmentSettingsResponse.  # noqa: E501
        :type default_tracked_shipment_method: str
        """

        self._default_tracked_shipment_method = default_tracked_shipment_method

    @property
    def default_untracked_shipment_method(self):
        """Gets the default_untracked_shipment_method of this ShipmentSettingsResponse.  # noqa: E501


        :return: The default_untracked_shipment_method of this ShipmentSettingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._default_untracked_shipment_method

    @default_untracked_shipment_method.setter
    def default_untracked_shipment_method(self, default_untracked_shipment_method):
        """Sets the default_untracked_shipment_method of this ShipmentSettingsResponse.


        :param default_untracked_shipment_method: The default_untracked_shipment_method of this ShipmentSettingsResponse.  # noqa: E501
        :type default_untracked_shipment_method: str
        """

        self._default_untracked_shipment_method = default_untracked_shipment_method

    @property
    def automatically_set_shipment_method_after_minutes(self):
        """Gets the automatically_set_shipment_method_after_minutes of this ShipmentSettingsResponse.  # noqa: E501


        :return: The automatically_set_shipment_method_after_minutes of this ShipmentSettingsResponse.  # noqa: E501
        :rtype: int
        """
        return self._automatically_set_shipment_method_after_minutes

    @automatically_set_shipment_method_after_minutes.setter
    def automatically_set_shipment_method_after_minutes(self, automatically_set_shipment_method_after_minutes):
        """Sets the automatically_set_shipment_method_after_minutes of this ShipmentSettingsResponse.


        :param automatically_set_shipment_method_after_minutes: The automatically_set_shipment_method_after_minutes of this ShipmentSettingsResponse.  # noqa: E501
        :type automatically_set_shipment_method_after_minutes: int
        """

        self._automatically_set_shipment_method_after_minutes = automatically_set_shipment_method_after_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentSettingsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShipmentSettingsResponse):
            return True

        return self.to_dict() != other.to_dict()
