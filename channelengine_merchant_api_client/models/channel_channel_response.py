# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    The version of the OpenAPI document: 2.9.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from channelengine_merchant_api_client.configuration import Configuration


class ChannelChannelResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'channel_id': 'int',
        'is_enabled': 'bool',
        'channel_name': 'str'
    }

    attribute_map = {
        'channel_id': 'ChannelId',
        'is_enabled': 'IsEnabled',
        'channel_name': 'ChannelName'
    }

    def __init__(self, channel_id=None, is_enabled=None, channel_name=None, local_vars_configuration=None):  # noqa: E501
        """ChannelChannelResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._channel_id = None
        self._is_enabled = None
        self._channel_name = None
        self.discriminator = None

        self.channel_id = channel_id
        if is_enabled is not None:
            self.is_enabled = is_enabled
        self.channel_name = channel_name

    @property
    def channel_id(self):
        """Gets the channel_id of this ChannelChannelResponse.  # noqa: E501

        The ID of the Channel.  # noqa: E501

        :return: The channel_id of this ChannelChannelResponse.  # noqa: E501
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ChannelChannelResponse.

        The ID of the Channel.  # noqa: E501

        :param channel_id: The channel_id of this ChannelChannelResponse.  # noqa: E501
        :type channel_id: int
        """

        self._channel_id = channel_id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this ChannelChannelResponse.  # noqa: E501

        A boolean value indicating whether the Channel is enabled.  # noqa: E501

        :return: The is_enabled of this ChannelChannelResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this ChannelChannelResponse.

        A boolean value indicating whether the Channel is enabled.  # noqa: E501

        :param is_enabled: The is_enabled of this ChannelChannelResponse.  # noqa: E501
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def channel_name(self):
        """Gets the channel_name of this ChannelChannelResponse.  # noqa: E501

        The name of the Channel.  # noqa: E501

        :return: The channel_name of this ChannelChannelResponse.  # noqa: E501
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this ChannelChannelResponse.

        The name of the Channel.  # noqa: E501

        :param channel_name: The channel_name of this ChannelChannelResponse.  # noqa: E501
        :type channel_name: str
        """

        self._channel_name = channel_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelChannelResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChannelChannelResponse):
            return True

        return self.to_dict() != other.to_dict()
